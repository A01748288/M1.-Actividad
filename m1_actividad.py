# -*- coding: utf-8 -*-
"""M1. Actividad.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x_-I7oIUDa732OSCGOsC6Rr6XkxC_EVz
"""

import numpy as np
import random

# Definir variables iniciales
M = 5  # Número de filas
N = 5  # Número de columnas
num_agents = 1  # Número de agentes
dirty_ratio = 0.2  # Proporción inicial de celdas sucias
max_time = 100  # Tiempo máximo de ejecución

# Crear matriz de celdas (0 limpio, 1 sucio)
grid = np.zeros((M, N))

# Inicializar celdas sucias
num_dirty_cells = int(M * N * dirty_ratio)
dirty_indices = random.sample(range(M * N), num_dirty_cells)
for idx in dirty_indices:
    row = idx // N
    col = idx % N
    grid[row][col] = 1

# Definir la clase del agente
class Agent:
    def __init__(self):
        self.position = [0, 0]  # Todos los agentes empiezan en [0, 0]

    def move(self):
        # Moverse a una celda vecina aleatoria
        new_row = self.position[0] + random.choice([-1, 0, 1])
        new_col = self.position[1] + random.choice([-1, 0, 1])

        # Verificar límites del entorno
        if 0 <= new_row < M and 0 <= new_col < N:
            self.position = [new_row, new_col]

# Crear agentes
agents = [Agent() for _ in range(num_agents)]

# Simulación
clean_cells = 0
total_moves = 0
timestep = 0

while clean_cells < M * N and timestep < max_time:
    timestep += 1

    # Lógica para cada agente
    for agent in agents:
        # Aspirar si la celda actual está sucia
        if grid[agent.position[0]][agent.position[1]] == 1:
            grid[agent.position[0]][agent.position[1]] = 0  # Limpiar la celda
            clean_cells += 1  # Incrementar el contador de celdas limpias

        agent.move()  # Moverse a una celda vecina aleatoria
        total_moves += 1

# Calcular el tiempo necesario hasta que todas las celdas estén limpias (o se haya llegado al tiempo máximo)
cleaning_time = timestep

# Calcular el porcentaje de celdas limpias después del término de la simulación
clean_percentage = (clean_cells / (M * N)) * 100

# Imprimir resultados
print("Tiempo necesario hasta que todas las celdas estén limpias (o se haya llegado al tiempo máximo):", cleaning_time)
print("Porcentaje de celdas limpias después del término de la simulación:", clean_percentage)
print("Número total de movimientos realizados por todos los agentes:", total_moves)